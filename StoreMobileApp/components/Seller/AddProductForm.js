import { useState } from "react";
import { View, Text, TextInput, Button, Image, ActivityIndicator } from "react-native";
import * as ImagePicker from 'expo-image-picker';
import { authApi, endpoints } from "../../configs/API";

const AddProductForm = ({ token, onAddProduct }) => {
  const [ten, setTen] = useState("");
  const [mo_ta, setMoTa] = useState("");
  const [gia, setGia] = useState("");
  const [so_luong_ton, setSoLuongTon] = useState("");
  const [anh_san_pham, setAnhSanPham] = useState(null);
  const [loading, setLoading] = useState(false);
  const [danhMucId, setDanhMucId] = useState(""); // Stores user input category ID

  
  // Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán ho·∫∑c m√°y ·∫£nh
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setAnhSanPham(result.assets[0].uri);
    }
  };

  const handleAddProduct = async () => {
    if (!ten || !mo_ta || !gia || !so_luong_ton || !danhMucId) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† nh·∫≠p ID danh m·ª•c!");
      return;
    }

    console.log("üîç Token being used:", token); // Debug token
    console.log("üîç Headers being sent:", {
        "Authorization": `Token ${token}`,
        "Content-Type": "multipart/form-data",
    });

    // ‚úÖ Declare formData BEFORE using it
    const formData = new FormData();
    formData.append("ten", ten);
    formData.append("mo_ta", mo_ta);
    formData.append("gia", gia);
    formData.append("so_luong_ton", so_luong_ton);
    formData.append("danh_muc", parseInt(danhMucId, 10));  // ‚úÖ Convert to integer
    console.log("üîç Selected Category ID:", danhMucId);  // ‚úÖ Check if the category ID is correct

    if (anh_san_pham) {
        let localUri = anh_san_pham;
        let filename = localUri.split("/").pop();
        let match = /\.(\w+)$/.exec(filename);
        let type = match ? `image/${match[1]}` : `image/jpeg`;

        formData.append("anh_san_pham", {
            uri: localUri,
            name: filename,
            type,
        });
    }

    try {
        setLoading(true);
        await authApi(token).post(endpoints["add-product"], formData, {
            headers: {
                "Authorization": `Token ${token}`,
           //     "Content-Type": "multipart/form-data",
            },
        });

        onAddProduct();
        alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
    } catch (error) {
        console.error("üö® Error adding product:", error.response?.data || error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
        setLoading(false);
    }
};

  
  

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 24 }}>Th√™m s·∫£n ph·∫©m m·ªõi</Text>
      <TextInput
        style={{ marginVertical: 10, borderWidth: 1, padding: 10 }}
        placeholder="T√™n s·∫£n ph·∫©m"
        value={ten}
        onChangeText={setTen}
      />
      <TextInput
        style={{ marginVertical: 10, borderWidth: 1, padding: 10 }}
        placeholder="M√¥ t·∫£ s·∫£n ph·∫©m"
        value={mo_ta}
        onChangeText={setMoTa}
      />
      <TextInput
        style={{ marginVertical: 10, borderWidth: 1, padding: 10 }}
        placeholder="Gi√°"
        keyboardType="numeric"
        value={gia}
        onChangeText={setGia}
      />
      <TextInput
        style={{ marginVertical: 10, borderWidth: 1, padding: 10 }}
        placeholder="S·ªë l∆∞·ª£ng t·ªìn"
        keyboardType="numeric"
        value={so_luong_ton}
        onChangeText={setSoLuongTon}
      />
      <TextInput
  style={{ marginVertical: 10, borderWidth: 1, padding: 10 }}
  placeholder="Nh·∫≠p ID danh m·ª•c"
  keyboardType="numeric" // Ensures user enters a number
  value={danhMucId}
  onChangeText={setDanhMucId}
/>

      {/* Ch·ªçn ·∫£nh s·∫£n ph·∫©m */}
      <Button title="Ch·ªçn ·∫£nh s·∫£n ph·∫©m" onPress={pickImage} />
      {anh_san_pham && (
        <Image
          source={{ uri: anh_san_pham }}
          style={{ width: 100, height: 100, marginVertical: 10 }}
        />
      )}

      {/* Button th√™m s·∫£n ph·∫©m */}
      {loading ? (
        <ActivityIndicator size="large" color="blue" />
      ) : (
        <Button title="Th√™m s·∫£n ph·∫©m" onPress={handleAddProduct} />
      )}
    </View>
  );
};

export default AddProductForm;
